name: Release

on:
    push:
        tags:
            - "v*"

permissions:
    contents: write

jobs:
    deploy:
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            # - name: Check version
            #   env:
            #       GITHUB_REF_NAME: ${{ github.ref_name }}
            #   run: |
            #       VERSION=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
            #       CURR=$(printf "%s" "$(cat pyproject.toml | grep ^version | sed 's/version = "\(.*\)"/\1/')")
            #       if [ "$VERSION" != "$CURR" ]; then
            #           echo "Error: VERSION ($VERSION) and CURR ($CURR) do not match."
            #           exit 1
            #       else
            #           echo "VERSION ($VERSION) matches CURR ($CURR). Proceeding."
            #       fi

            - name: Set up Python
              uses: actions/setup-python@v3
              with:
                  python-version: "3.9"

            - uses: actions/cache@v4
              id: restore_cache
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements.txt', '**/dev.requirements') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-build-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build

            - name: Build package
              run: python -m build

            - name: Publish package distributions to PyPI
              if: matrix.os == 'ubuntu-latest'
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}

            - name: Upload dist artifact
              if: matrix.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-linux
                  path: dist

            - name: Upload dist artifact
              if: matrix.os == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-macos
                  path: dist

            - name: Upload dist artifact
              if: matrix.os == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-windows
                  path: dist

            - uses: actions/cache@v4
              if: steps.restore_cache.outputs.cache-hit != 'true'
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements.txt', '**/dev.requirements') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-build-

    build-docs:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
            - uses: dtolnay/rust-toolchain@stable

            - name: Restore Cargo Cache
              id: restore_cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install mdbook
              if: steps.restore_cache.outputs.cache-hit != 'true'
              run: cargo install --git https://github.com/rust-lang/mdBook.git mdbook

            - name: Build docs
              run: bash ./scripts/docs/build.sh

            - name: Upload docs artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: book

            - uses: actions/cache@v4
              if: steps.restore_cache.outputs.cache-hit != 'true'
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    deploy-docs:
        needs:
            - build-docs
            - deploy
        permissions:
            pages: write
            id-token: write

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        runs-on: ubuntu-latest
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    create-release:
        needs:
            - deploy-docs
            - deploy

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Download dist artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-linux
                  path: dist-linux

            - name: Download dist artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-macos
                  path: dist-macos

            - name: Download dist artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ github.ref_name }}-windows
                  path: dist-windows

            - name: Release
              uses: softprops/action-gh-release@v2
              with:
                  name: Release ${{ github.ref_name }}
                  body_path: CHANGELOG.md
                  files: dist-linux/*
                      dist-macos/*
                      dist-windows/*
                  make_latest: true
